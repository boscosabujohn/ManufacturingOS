import { useState } from 'react';
import { X, Plus } from 'lucide-react';

export function AddMilestoneModal({ isOpen, onClose, onAdd }: any) {
  const [data, setData] = useState({ name: '', date: '', type: 'Major' });
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-2xl"><div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Add Milestone</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6 space-y-4"><div><label className="block text-sm font-medium mb-1">Milestone Name</label><input type="text" value={data.name} onChange={(e) => setData({...data, name: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">Date</label><input type="date" value={data.date} onChange={(e) => setData({...data, date: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">Type</label><select value={data.type} onChange={(e) => setData({...data, type: e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option>Major</option><option>Minor</option><option>Review</option></select></div></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onAdd(data)} className="px-4 py-2 bg-blue-600 text-white rounded-lg">Add</button></div></div></div>);
}

export function EditMilestoneModal({ isOpen, onClose, onEdit, milestone }: any) {
  const [data, setData] = useState({ name: milestone?.name || '', date: milestone?.date || '' });
  if (!isOpen || !milestone) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-2xl"><div className="bg-gradient-to-r from-green-600 to-green-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Edit Milestone</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6 space-y-4"><div><label className="block text-sm font-medium mb-1">Name</label><input type="text" value={data.name} onChange={(e) => setData({...data, name: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">Date</label><input type="date" value={data.date} onChange={(e) => setData({...data, date: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onEdit(data)} className="px-4 py-2 bg-green-600 text-white rounded-lg">Save</button></div></div></div>);
}

export function UpdateTimelineModal({ isOpen, onClose, onUpdate }: any) {
  const [data, setData] = useState({ startDate: '', endDate: '' });
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-md"><div className="bg-gradient-to-r from-purple-600 to-purple-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Update Timeline</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6 space-y-4"><div><label className="block text-sm font-medium mb-1">Start Date</label><input type="date" value={data.startDate} onChange={(e) => setData({...data, startDate: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">End Date</label><input type="date" value={data.endDate} onChange={(e) => setData({...data, endDate: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onUpdate(data)} className="px-4 py-2 bg-purple-600 text-white rounded-lg">Update</button></div></div></div>);
}

export function AddPhaseModal({ isOpen, onClose, onAdd }: any) {
  const [data, setData] = useState({ phaseName: '', duration: '', tasks: '' });
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-2xl"><div className="bg-gradient-to-r from-orange-600 to-orange-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Add Phase</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6 space-y-4"><div><label className="block text-sm font-medium mb-1">Phase Name</label><input type="text" value={data.phaseName} onChange={(e) => setData({...data, phaseName: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">Duration (days)</label><input type="number" value={data.duration} onChange={(e) => setData({...data, duration: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onAdd(data)} className="px-4 py-2 bg-orange-600 text-white rounded-lg">Add</button></div></div></div>);
}

export function AdjustDatesModal({ isOpen, onClose, onAdjust }: any) {
  const [days, setDays] = useState(0);
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-md"><div className="bg-gradient-to-r from-teal-600 to-teal-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Adjust Dates</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><label className="block text-sm font-medium mb-2">Shift by (days)</label><input type="number" value={days} onChange={(e) => setDays(Number(e.target.value))} className="w-full px-3 py-2 border rounded-lg" placeholder="Positive or negative" /></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onAdjust({ days })} className="px-4 py-2 bg-teal-600 text-white rounded-lg">Adjust</button></div></div></div>);
}

export function SetBaselineModal({ isOpen, onClose, onSet }: any) {
  const [name, setName] = useState('');
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-md"><div className="bg-gradient-to-r from-indigo-600 to-indigo-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Set Baseline</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><label className="block text-sm font-medium mb-2">Baseline Name</label><input type="text" value={name} onChange={(e) => setName(e.target.value)} className="w-full px-3 py-2 border rounded-lg" placeholder="e.g., Initial Plan" /></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onSet({ name })} className="px-4 py-2 bg-indigo-600 text-white rounded-lg">Set</button></div></div></div>);
}

export function CompareBaselinesModal({ isOpen, onClose }: any) {
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-3xl"><div className="bg-gradient-to-r from-yellow-600 to-yellow-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Compare Baselines</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><p className="text-gray-600">Baseline comparison view would be shown here</p></div><div className="bg-gray-50 px-6 py-4 flex justify-end border-t"><button onClick={onClose} className="px-4 py-2 bg-yellow-600 text-white rounded-lg">Close</button></div></div></div>);
}

export function ExportTimelineModal({ isOpen, onClose, onExport }: any) {
  const [format, setFormat] = useState('PDF');
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-md"><div className="bg-gradient-to-r from-emerald-600 to-emerald-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Export Timeline</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><label className="block text-sm font-medium mb-2">Format</label><select value={format} onChange={(e) => setFormat(e.target.value)} className="w-full px-3 py-2 border rounded-lg"><option>PDF</option><option>PNG</option><option>Excel</option><option>MS Project</option></select></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onExport({ format })} className="px-4 py-2 bg-emerald-600 text-white rounded-lg">Export</button></div></div></div>);
}

export function FilterTimelineModal({ isOpen, onClose, onApply }: any) {
  const [filters, setFilters] = useState({ dateRange: 'all', phase: 'all', status: 'all' });
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-2xl"><div className="bg-gradient-to-r from-cyan-600 to-cyan-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Filter Timeline</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><div className="grid grid-cols-2 gap-4"><div><label className="block text-sm font-medium mb-1">Date Range</label><select value={filters.dateRange} onChange={(e) => setFilters({...filters, dateRange: e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option value="all">All</option><option>This Week</option><option>This Month</option></select></div><div><label className="block text-sm font-medium mb-1">Phase</label><select value={filters.phase} onChange={(e) => setFilters({...filters, phase: e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option value="all">All</option><option>Planning</option><option>Execution</option></select></div></div></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onApply(filters)} className="px-4 py-2 bg-cyan-600 text-white rounded-lg">Apply</button></div></div></div>);
}

export function ZoomTimelineModal({ isOpen, onClose, onZoom }: any) {
  const [level, setLevel] = useState('Month');
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-md"><div className="bg-gradient-to-r from-pink-600 to-pink-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Zoom Level</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><label className="block text-sm font-medium mb-2">View By</label><select value={level} onChange={(e) => setLevel(e.target.value)} className="w-full px-3 py-2 border rounded-lg"><option>Day</option><option>Week</option><option>Month</option><option>Quarter</option><option>Year</option></select></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onZoom({ level })} className="px-4 py-2 bg-pink-600 text-white rounded-lg">Apply</button></div></div></div>);
}

export function AddDependencyModal({ isOpen, onClose, onAdd }: any) {
  const [dep, setDep] = useState({ from: '', to: '', type: 'FS' });
  if (!isOpen) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-2xl"><div className="bg-gradient-to-r from-amber-600 to-amber-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Add Dependency</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6 space-y-4"><div><label className="block text-sm font-medium mb-1">From Task</label><input type="text" value={dep.from} onChange={(e) => setDep({...dep, from: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">To Task</label><input type="text" value={dep.to} onChange={(e) => setDep({...dep, to: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-medium mb-1">Type</label><select value={dep.type} onChange={(e) => setDep({...dep, type: e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option value="FS">Finish-to-Start</option><option value="SS">Start-to-Start</option></select></div></div><div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3 border-t"><button onClick={onClose} className="px-4 py-2 border rounded-lg">Cancel</button><button onClick={() => onAdd(dep)} className="px-4 py-2 bg-amber-600 text-white rounded-lg">Add</button></div></div></div>);
}

export function ViewDetailsModal({ isOpen, onClose, item }: any) {
  if (!isOpen || !item) return null;
  return (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"><div className="bg-white rounded-lg shadow-xl w-full max-w-3xl"><div className="bg-gradient-to-r from-slate-600 to-slate-700 px-6 py-4 flex justify-between items-center"><h2 className="text-xl font-bold text-white">Timeline Details</h2><button onClick={onClose} className="text-white"><X className="h-5 w-5" /></button></div><div className="p-6"><p className="text-gray-600">Details for {item.name}</p></div><div className="bg-gray-50 px-6 py-4 flex justify-end border-t"><button onClick={onClose} className="px-4 py-2 bg-slate-600 text-white rounded-lg">Close</button></div></div></div>);
}
