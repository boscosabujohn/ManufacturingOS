#!/usr/bin/env node
/*
  Processes routes_catalog.csv from bottom to top.
  - Verifies file existence for each route "File Path" column
  - Generates a markdown report listing any missing files in bottom-up order
  - Optional: --create to generate stub page.tsx for missing files

  Usage:
    node scripts/process-routes-csv.js [--create] [--limit N]
*/
const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');
const CSV_PATH = path.join(ROOT, 'routes_catalog.csv');
const REPORT_PATH = path.join(ROOT, 'GENERATED_ROUTES_MISSING_REPORT.md');

const args = process.argv.slice(2);
const shouldCreate = args.includes('--create');
const limitIndex = args.findIndex(a => a === '--limit');
const limit = limitIndex !== -1 ? parseInt(args[limitIndex + 1], 10) : undefined;

function parseCsv(text) {
  const lines = text.trim().split(/\r?\n/);
  const header = lines.shift().split(',');
  const rows = lines.map(line => {
    // naive CSV parser since values don't contain commas except in path; using split(',') works here
    const cols = [];
    let current = '';
    let inQuotes = false;
    for (let i = 0; i < line.length; i++) {
      const ch = line[i];
      if (ch === '"') { inQuotes = !inQuotes; continue; }
      if (ch === ',' && !inQuotes) { cols.push(current); current = ''; continue; }
      current += ch;
    }
    cols.push(current);
    const obj = {};
    header.forEach((h, idx) => { obj[h.trim()] = (cols[idx] || '').trim(); });
    return obj;
  });
  return rows;
}

function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function makeStubContent(route, module, subsection) {
  const title = `${module} • ${subsection}`;
  return `'use client';

import React from 'react';

export default function AutoGeneratedPage() {
  return (
    <div className="w-full min-h-screen px-4 sm:px-6 lg:px-8 py-6">
      <div className="max-w-5xl mx-auto">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">${title}</h1>
          <p className="text-sm text-gray-500 mb-6">Route: ${route}</p>
          <div className="p-4 rounded-lg bg-gradient-to-br from-yellow-50 to-orange-50 border border-yellow-200 text-yellow-800">
            This page was auto-generated from routes_catalog.csv. Replace with real implementation.
          </div>
        </div>
      </div>
    </div>
  );
}
`;
}

function main() {
  if (!fs.existsSync(CSV_PATH)) {
    console.error('routes_catalog.csv not found at', CSV_PATH);
    process.exit(1);
  }
  const csv = fs.readFileSync(CSV_PATH, 'utf8');
  const rows = parseCsv(csv);
  const reversed = rows.slice().reverse();
  const toProcess = typeof limit === 'number' ? reversed.slice(0, limit) : reversed;

  const missing = [];
  let created = 0;
  for (const row of toProcess) {
    const filePath = row['File Path'];
    if (!filePath) continue;
    // Normalize to current OS path separators; keep absolute path intact
    const normalized = path.normalize(filePath);
    if (!fs.existsSync(normalized)) {
      missing.push({ route: row.Route, filePath: normalized, module: row.Module, subsection: row.Subsection });
      if (shouldCreate) {
        const dir = path.dirname(normalized);
        ensureDir(dir);
        fs.writeFileSync(normalized, makeStubContent(row.Route, row.Module, row.Subsection), 'utf8');
        created++;
      }
    }
  }

  let md = `# Routes CSV Missing Files Report (Bottom-Up)\n\n`;
  md += `Processed: ${toProcess.length} routes (from bottom).\\n`;
  md += `Missing files: ${missing.length}${shouldCreate ? ` (created: ${created})` : ''}.\\n\n`;
  if (missing.length === 0) {
    md += `All processed routes already have files. ✅\n`;
  } else {
    md += `## Missing (in bottom-up order)\n\n`;
    missing.forEach((m, idx) => {
      md += `${idx + 1}. [${m.route}] - ${m.filePath} (${m.module} / ${m.subsection})\n`;
    });
  }
  fs.writeFileSync(REPORT_PATH, md, 'utf8');
  console.log(md);
}

main();
